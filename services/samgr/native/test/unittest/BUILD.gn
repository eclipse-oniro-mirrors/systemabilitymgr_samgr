# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../var.gni")

module_output_path = "samgr/samgr"
samgr_dir = "//foundation/systemabilitymgr/samgr"
samgr_services_dir = "${samgr_dir}/services/samgr/native"

config("sam_test_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "${samgr_services_dir}/test/unittest/include",
    "//foundation/systemabilitymgr/samgr/services/dfx/include",
    "//foundation/systemabilitymgr/samgr/utils/native/include",
    "//foundation/systemabilitymgr/samgr/services/lsamgr/include",
    "//third_party/json/include",
    "//third_party/json/single_include",
  ]
}

ohos_unittest("SystemAbilityMgrTest") {
  module_out_path = module_output_path

  sources = [
    "${samgr_dir}/utils/native/source/tools.cpp",
    "${samgr_services_dir}/source/ability_death_recipient.cpp",
    "${samgr_services_dir}/source/collect/device_param_collect.cpp",
    "${samgr_services_dir}/source/collect/device_status_collect_manager.cpp",
    "${samgr_services_dir}/source/collect/device_timed_collect.cpp",
    "${samgr_services_dir}/source/collect/icollect_plugin.cpp",
    "${samgr_services_dir}/source/memory_guard.cpp",
    "${samgr_services_dir}/source/rpc_callback_imp.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_event_handler.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_state_machine.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_state_scheduler.cpp",
    "${samgr_services_dir}/source/system_ability_load_callback_proxy.cpp",
    "${samgr_services_dir}/source/system_ability_manager.cpp",
    "${samgr_services_dir}/source/system_ability_manager_stub.cpp",
    "${samgr_services_dir}/source/system_ability_status_change_proxy.cpp",
    "${samgr_services_dir}/source/system_process_status_change_proxy.cpp",
    "${samgr_services_dir}/test/unittest/src/device_param_collect_test.cpp",
    "${samgr_services_dir}/test/unittest/src/device_status_collect_manager_test.cpp",
    "${samgr_services_dir}/test/unittest/src/device_timed_collect_test.cpp",
    "${samgr_services_dir}/test/unittest/src/itest_transaction_service.cpp",
    "${samgr_services_dir}/test/unittest/src/mock_permission.cpp",
    "${samgr_services_dir}/test/unittest/src/sa_status_change_mock.cpp",
    "${samgr_services_dir}/test/unittest/src/system_ability_mgr_test.cpp",
    "//foundation/systemabilitymgr/samgr/frameworks/native/source/system_process_status_change_stub.cpp",
    "//foundation/systemabilitymgr/samgr/services/dfx/source/hicollie_helper.cpp",
    "//foundation/systemabilitymgr/samgr/services/dfx/source/hisysevent_adapter.cpp",
    "//foundation/systemabilitymgr/samgr/services/lsamgr/src/local_ability_manager_proxy.cpp",
  ]

  configs = [
    ":sam_test_config",
    "${samgr_dir}/services/samgr/native:sam_config",
    "//foundation/systemabilitymgr/samgr/test/resource:coverage_flags",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${samgr_dir}/interfaces/innerkits/common:samgr_common",
    "${samgr_dir}/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:libdbinder",
  ]
  defines = []
  if (use_musl) {
    if (use_jemalloc && use_jemalloc_dfx_intf) {
      defines += [ "CONFIG_USE_JEMALLOC_DFX_INTF" ]
    }
  }
  if (hicollie_able) {
    external_deps += [ "hicollie_native:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (ressched_able) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "RESSCHED_ENABLE" ]
  }

  if (support_device_manager) {
    sources += [
      "${samgr_services_dir}/source/collect/device_networking_collect.cpp",
      "${samgr_services_dir}/test/unittest/src/device_networking_collect_test.cpp",
    ]
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "SUPPORT_DEVICE_MANAGER" ]
  }

  if (support_common_event) {
    sources += [
      "${samgr_services_dir}/source/collect/common_event_collect.cpp",
      "${samgr_services_dir}/test/unittest/src/common_event_collect_test.cpp",
    ]
    external_deps += [
      "ability_base:want",
      "common_event_service:cesfwk_innerkits",
    ]
    defines += [ "SUPPORT_COMMON_EVENT" ]
  }
}

ohos_unittest("SystemAbilityMgrStubTest") {
  module_out_path = module_output_path

  sources = [
    "${samgr_dir}/utils/native/source/tools.cpp",
    "${samgr_services_dir}/source/ability_death_recipient.cpp",
    "${samgr_services_dir}/source/collect/device_param_collect.cpp",
    "${samgr_services_dir}/source/collect/device_status_collect_manager.cpp",
    "${samgr_services_dir}/source/collect/device_timed_collect.cpp",
    "${samgr_services_dir}/source/collect/icollect_plugin.cpp",
    "${samgr_services_dir}/source/memory_guard.cpp",
    "${samgr_services_dir}/source/rpc_callback_imp.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_event_handler.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_state_machine.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_state_scheduler.cpp",
    "${samgr_services_dir}/source/system_ability_manager.cpp",
    "${samgr_services_dir}/source/system_ability_manager_stub.cpp",
    "${samgr_services_dir}/test/unittest/src/itest_transaction_service.cpp",
    "${samgr_services_dir}/test/unittest/src/mock_permission.cpp",
    "${samgr_services_dir}/test/unittest/src/sa_status_change_mock.cpp",
    "${samgr_services_dir}/test/unittest/src/system_ability_mgr_stub_test.cpp",
    "//foundation/systemabilitymgr/samgr/services/dfx/source/hicollie_helper.cpp",
  ]

  configs = [
    ":sam_test_config",
    "${samgr_dir}/services/samgr/native:sam_config",
    "//foundation/systemabilitymgr/samgr/test/resource:coverage_flags",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${samgr_dir}/interfaces/innerkits/common:samgr_common",
    "${samgr_dir}/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:libdbinder",
  ]
  defines = []
  if (use_musl) {
    if (use_jemalloc && use_jemalloc_dfx_intf) {
      defines += [ "CONFIG_USE_JEMALLOC_DFX_INTF" ]
    }
  }
  if (hicollie_able) {
    external_deps += [ "hicollie_native:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (ressched_able) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "RESSCHED_ENABLE" ]
  }

  if (support_device_manager) {
    sources +=
        [ "${samgr_services_dir}/source/collect/device_networking_collect.cpp" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "SUPPORT_DEVICE_MANAGER" ]
  }
}

ohos_unittest("SystemAbilityMgrProxyTest") {
  module_out_path = module_output_path

  sources = [
    "${samgr_services_dir}/source/system_ability_load_callback_proxy.cpp",
    "${samgr_services_dir}/source/system_ability_status_change_proxy.cpp",
    "${samgr_services_dir}/source/system_process_status_change_proxy.cpp",
    "${samgr_services_dir}/test/unittest/src/itest_transaction_service.cpp",
    "${samgr_services_dir}/test/unittest/src/local_abilitys_test.cpp",
    "${samgr_services_dir}/test/unittest/src/mock_iro_sendrequest.cpp",
    "${samgr_services_dir}/test/unittest/src/mock_permission.cpp",
    "${samgr_services_dir}/test/unittest/src/sa_status_change_mock.cpp",
    "${samgr_services_dir}/test/unittest/src/system_ability_mgr_proxy_test.cpp",
    "//foundation/systemabilitymgr/samgr/frameworks/native/source/system_ability_manager_proxy.cpp",
    "//foundation/systemabilitymgr/samgr/frameworks/native/source/system_process_status_change_stub.cpp",
    "//foundation/systemabilitymgr/samgr/services/lsamgr/src/local_ability_manager_proxy.cpp",
    "//foundation/systemabilitymgr/samgr/services/lsamgr/src/local_abilitys.cpp",
  ]

  configs = [
    ":sam_test_config",
    "${samgr_dir}/services/samgr/native:sam_config",
    "//foundation/systemabilitymgr/samgr/test/resource:coverage_flags",
  ]

  if (target_cpu == "arm") {
    cflags = [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${samgr_dir}/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "ipc:ipc_single",
  ]
}

ohos_unittest("LocalAbilityManagerProxyTest") {
  module_out_path = module_output_path

  sources = [
    "${samgr_services_dir}/test/unittest/src/itest_transaction_service.cpp",
    "${samgr_services_dir}/test/unittest/src/local_ability_manager_proxy_test.cpp",
    "${samgr_services_dir}/test/unittest/src/mock_iro_sendrequest.cpp",
    "//foundation/systemabilitymgr/samgr/services/lsamgr/src/local_ability_manager_proxy.cpp",
  ]

  configs = [
    ":sam_test_config",
    "${samgr_dir}/services/samgr/native:sam_config",
    "//foundation/systemabilitymgr/samgr/test/resource:coverage_flags",
  ]

  if (target_cpu == "arm") {
    cflags = [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [ "//third_party/googletest:gtest_main" ]

  external_deps = [
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]
}

ohos_unittest("SystemAbilityStateSchedulerTest") {
  module_out_path = module_output_path

  sources = [
    "${samgr_dir}/utils/native/source/tools.cpp",
    "${samgr_services_dir}/source/ability_death_recipient.cpp",
    "${samgr_services_dir}/source/collect/device_param_collect.cpp",
    "${samgr_services_dir}/source/collect/device_status_collect_manager.cpp",
    "${samgr_services_dir}/source/collect/icollect_plugin.cpp",
    "${samgr_services_dir}/source/memory_guard.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_event_handler.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_state_machine.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_state_scheduler.cpp",
    "${samgr_services_dir}/source/system_ability_manager.cpp",
    "${samgr_services_dir}/source/system_ability_manager_stub.cpp",
    "${samgr_services_dir}/test/unittest/src/sa_status_change_mock.cpp",
    "${samgr_services_dir}/test/unittest/src/system_ability_event_handler_test.cpp",
    "${samgr_services_dir}/test/unittest/src/system_ability_state_machine_test.cpp",
    "${samgr_services_dir}/test/unittest/src/system_ability_state_scheduler_test.cpp",
  ]

  defines = []
  if (use_musl) {
    if (use_jemalloc && use_jemalloc_dfx_intf) {
      defines += [ "CONFIG_USE_JEMALLOC_DFX_INTF" ]
    }
  }

  configs = [
    ":sam_test_config",
    "${samgr_dir}/services/samgr/native:sam_config",
    "//foundation/systemabilitymgr/samgr/test/resource:coverage_flags",
  ]

  if (target_cpu == "arm") {
    cflags = [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [
    "${samgr_dir}/interfaces/innerkits/common:samgr_common",
    "${samgr_dir}/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:libdbinder",
  ]
}

ohos_executable("ondemand") {
  sources = [
    "${samgr_services_dir}/test/unittest/src/mock_permission.cpp",
    "./src/ondemand_helper.cpp",
  ]
  configs = [
    ":sam_test_config",
    "//foundation/systemabilitymgr/samgr/test/resource:coverage_flags",
  ]
  deps = [ "${samgr_dir}/interfaces/innerkits/samgr_proxy:samgr_proxy" ]
  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog_base" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  external_deps += [
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "dsoftbus:softbus_client",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]
  part_name = "samgr"
  subsystem_name = "systemabilitymgr"
}

ohos_executable("TestTool") {
  #module_out_path = module_output_path
  sources = [
    "${samgr_dir}/utils/native/source/tools.cpp",
    "${samgr_services_dir}/source/ability_death_recipient.cpp",
    "${samgr_services_dir}/source/collect/device_param_collect.cpp",
    "${samgr_services_dir}/source/collect/device_status_collect_manager.cpp",
    "${samgr_services_dir}/source/collect/device_timed_collect.cpp",
    "${samgr_services_dir}/source/collect/icollect_plugin.cpp",
    "${samgr_services_dir}/source/memory_guard.cpp",
    "${samgr_services_dir}/source/rpc_callback_imp.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_event_handler.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_state_machine.cpp",
    "${samgr_services_dir}/source/schedule/system_ability_state_scheduler.cpp",
    "${samgr_services_dir}/source/system_ability_load_callback_proxy.cpp",
    "${samgr_services_dir}/source/system_ability_manager.cpp",
    "${samgr_services_dir}/source/system_ability_manager_stub.cpp",
    "${samgr_services_dir}/source/system_ability_status_change_proxy.cpp",
    "${samgr_services_dir}/source/system_process_status_change_proxy.cpp",
    "${samgr_services_dir}/test/unittest/src/itest_transaction_service.cpp",
    "./src/system_ability_test_tool.cpp",
    "//foundation/systemabilitymgr/samgr/services/dfx/source/hicollie_helper.cpp",
    "//foundation/systemabilitymgr/samgr/services/dfx/source/hisysevent_adapter.cpp",
  ]

  configs = [
    ":sam_test_config",
    "${samgr_dir}/interfaces/innerkits/samgr_proxy:samgr_proxy_config",
    "${samgr_dir}/services/samgr/native:sam_config",
    "//foundation/systemabilitymgr/samgr/test/resource:coverage_flags",
  ]
  deps = [
    "${samgr_dir}/interfaces/innerkits/common:samgr_common",
    "${samgr_dir}/interfaces/innerkits/samgr_proxy:samgr_proxy",
  ]
  if (is_standard_system) {
    external_deps = [ "hiviewdfx_hilog_native:libhilog_base" ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  defines = []
  if (use_musl) {
    if (use_jemalloc && use_jemalloc_dfx_intf) {
      defines += [ "CONFIG_USE_JEMALLOC_DFX_INTF" ]
    }
  }
  if (hicollie_able) {
    external_deps += [ "hicollie_native:libhicollie" ]
    defines += [ "HICOLLIE_ENABLE" ]
  }

  if (ressched_able) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
    defines += [ "RESSCHED_ENABLE" ]
  }

  if (support_device_manager) {
    sources +=
        [ "${samgr_services_dir}/source/collect/device_networking_collect.cpp" ]
    external_deps += [ "device_manager:devicemanagersdk" ]
    defines += [ "SUPPORT_DEVICE_MANAGER" ]
  }
  external_deps += [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "dsoftbus:softbus_client",
    "eventhandler:libeventhandler",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "hiviewdfx_hilog_native:libhilog_base",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:libdbinder",
  ]
  part_name = "samgr"
  subsystem_name = "systemabilitymgr"
}

ohos_rust_unittest("rust_samgr_test_client") {
  module_out_path = module_output_path

  resource_config_file =
      "//foundation/systemabilitymgr/samgr/test/resource/ohos_test.xml"

  sources = [ "./rust/rust_samgr_test.rs" ]
  deps = [
    "//base/hiviewdfx/hilog/interfaces/rust:hilog_rust",
    "//foundation/communication/ipc/interfaces/innerkits/rust:ipc_rust",
    "//foundation/systemabilitymgr/safwk/test/services/safwk/unittest/rust:audio_rust_ipc",
    "//foundation/systemabilitymgr/safwk/test/services/safwk/unittest/rust:audio_rust_sa",
    "//foundation/systemabilitymgr/samgr/interfaces/innerkits/rust:rust_samgr",
    "//foundation/systemabilitymgr/samgr/services/samgr/native/test/unittest/rust/service:test_access_token",
  ]

  subsystem_name = "systemabilitymgr"
  part_name = "samgr"
}

group("unittest") {
  testonly = true
  deps = [
    ":LocalAbilityManagerProxyTest",
    ":SystemAbilityMgrProxyTest",
    ":SystemAbilityMgrStubTest",
    ":SystemAbilityMgrTest",
    ":SystemAbilityStateSchedulerTest",
    ":TestTool",
    ":ondemand",
    ":rust_samgr_test_client",
  ]
}
